package app.victor.sentinela.imbituba.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import android.content.Context;
import android.content.ContextWrapper;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.util.Log;

public class TerrenoImages {
    

    public static class DownloadImageTask extends AsyncTask<String, Integer, Bitmap>{
        private Context mContext;

        public DownloadImageTask (Context context) {
            mContext = context;
        }
        
        public Bitmap downloadUrl(String strUrl) throws IOException{
            Bitmap bitmap=null;
            InputStream iStream = null;
            try{
                String imageURL = strUrl.replaceAll("\\.", ""); //tira o ponto referente ao path relativo da pasta de imagens
                URL url = new URL("http://192.168.25.229:30000/timg?path="+imageURL);
                /** Creating an http connection to communcate with url */
                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();

                /** Connecting to url */
                urlConnection.connect();

                /** Reading data from url */
                iStream = urlConnection.getInputStream();

                /** Creating a bitmap from the stream returned from the url */
                bitmap = BitmapFactory.decodeStream(iStream);

            }catch(Exception e){
                Log.d("Exception while downloading url", e.toString());
            }finally{
                iStream.close();
            }
            return bitmap;
        }       
        
        Bitmap bitmap = null;
        @Override
        protected Bitmap doInBackground(String... url) {
            try{
                bitmap = downloadUrl(url[0]);
            }catch(Exception e){
                Log.d("Background Task",e.toString());
            }
            return bitmap;
        }

        @Override
        protected void onPostExecute(Bitmap result) {

            /** Getting a reference to ImageView to display the
             * downloaded image
             */
            /*debug purposes
            ImageView iView = (ImageView) findViewById(R.id.imageview_teste);

            /// Displaying the downloaded image
            iView.setImageBitmap(result);

            // Showing a message, on completion of download process
            Toast.makeText(getBaseContext(), "Image downloaded successfully", Toast.LENGTH_SHORT).show();
            */         
            saveToInternalSorage(mContext, result);

        }
    }
    /*victor: teste 2:ok app_imagens*/
    public static String saveToInternalSorage(Context context, Bitmap bitmapImage){
        
        ContextWrapper cw=(ContextWrapper)context;
        //ContextWrapper cw = new ContextWrapper(getApplicationContext());

        //abordagem 2
        /*
        File appDir = getApplicationContext();
        File imgdir = new File(appDir, "imagens");
        if( !imgdir.exists() )
            imgdir.mkdir();
        File imgfile = new File(imgdir, "terreno1.jpg");
        */ 
         // path to /data/data/yourapp/app_data/imageDir
        File directory = cw.getDir("imagens", Context.MODE_PRIVATE);
        // Create imageDir
        File mypath=new File(directory,"terreno1.jpg");

        FileOutputStream fos = null;
        try {           

            fos = new FileOutputStream(mypath);

       // Use the compress method on the BitMap object to write image to the OutputStream
            bitmapImage.compress(Bitmap.CompressFormat.JPEG, 100, fos);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return mypath.getAbsolutePath();
    }

    /* metodo para carregar a imagem do path */
    public static Bitmap loadImageFromStorage(String img_name, String imageViewId) {
        Bitmap b = null;
        try {
            File imgFile=new File("app_imagens", img_name);
            b = BitmapFactory.decodeStream(new FileInputStream(imgFile));
        } 
        catch (FileNotFoundException e) 
        {
            e.printStackTrace();
        }
        return b;
    }
    
}
